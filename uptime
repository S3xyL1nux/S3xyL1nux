#!/usr/bin/env bash

#here you type how many days you would like to delay the uptime :
delay="47"
#here ^

slc1a=`date +%Y`
slc1b=`date +%m`
slc1c=`date +%d`
slc1d=`date +%H`
slc1e=`date +%M`
slc1f=`date +%S`

since="`uptime --since`"
start="`date --date "$since" '+%s'`"
now="`date '+%s'`"
sec=$((now-start))

slsd1=`uptime -s | awk '{print $1}'`
slsd2=`date +%Y-%m-%d -d "$slsd1 - $delay day"`

days=$((sec/(60*60*24)))
sldays=$((sec/(60*60*24)*$delay))
sec=$((sec-days*(60*60*24)))

hr=$((sec/(60*60)))
sec=$((sec-hr*(60*60)))

min=$((sec/60))
sec=$((sec-min*60))

rest="$(uptime | perl -npe'{s/(.*,\s+)(\d+\s+user)/$2 /}')"

if [[ $hr == 0 ]]; then
slhr=""
slhr2=""
slmin="$min min"
fi
if [[ $hr != 0 ]] && [[ $hr == 1 ]]; then
slhr="$hr:"
slhr2="$hr hour,"
slmin="$min"
slmin2="$min minute"
fi
if [[ $hr != 0 ]] && [[ $hr != 1 ]]; then
slhr="$hr:"
slhr2="$hr hours,"
slmin="$min"
slmin2="$min minutes"
fi
if [[ $min == 0 ]] || [[ $min == 1 ]]; then
slmin2="$min minute"
fi
if [ $min -gt 1 ]; then
slmin2="$min minutes"
fi

if [ $min -gt 1 ] && [ $min -lt 9 ]; then
slmin="0$min"
fi

usage()
{
echo
echo Usage:
echo " uptime [options]"
echo
echo Options:
echo " -p, --pretty   show uptime in pretty format"
echo " -h, --help     display this help and exit"
echo " -s, --since    system up since"
echo " -V, --version  output version information and exit"
echo
echo "For more details see uptime(1)."
}

while getopts "psVx:h*:" option; do
  case "${option}" in
    p) echo up $sldays days, $slhr2 $slmin2 && exit 0 ;;
    h) usage && exit 0 ;;
    s) echo $slsd2 02:33:43 && exit 0 ;;
    V) echo uptime from procps-ng 3.3.12 && exit 0 ;;
  esac
done 2>/dev/null

echo " $slc1d:$slc1e:$slc1f up $sldays days, $slhr$slmin,  "$rest""


